// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//User model
model User {
    id Int @id @default(autoincrement())
    firstName String
    lastName String
    userName String? @unique
    email String @unique
    googleId String? @unique 
    password String? 
    isActivated Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    profilePicture String?
    biography String?
    phone String? @unique
    questions Question []
    savedItems SavedItem []
    answers Answer []
    badges Badge []
    userBadges UserBadge []
    actorNotifications Notification[] @relation("ActorNotifications")
    sentMessages Message[] @relation("SentMessages")
    receivedMessages Message[] @relation("ReceivedMessages")
    votes Vote[]
    searchLogs SearchLog[]
    tragetUserNotifications Notification[] @relation("TargetUserNotifications")
}

//type of notification
enum NotificationType {
    NEW_ANSWER
    NEW_BADGE
    NEW_VOTE
}
// Notification model
model Notification {
  id              Int             @id @default(autoincrement())
  type            NotificationType
  content         String
  metaData        Json?           // Optional extra data for flexibility
  actorId         Int?            // The user who triggered the notification
  actor           User?           @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)
  targetUserId    Int            // The user who receives the notification
  targetUser      User            @relation("TargetUserNotifications", fields: [targetUserId], references: [id], onDelete: Cascade)
  targetEntityId  Int?            // ID of the entity related to the notification (e.g., answer, question, etc.)
  targetEntityType TargetEntityType? // Enum for type of the related entity
  isRead          Boolean         @default(false)
  createdAt       DateTime        @default(now())
}

// Enum for entity types involved in notifications
enum TargetEntityType {
  QUESTION
  ANSWER
  VOTE
  BADGE
  MESSAGE
}

//Message model
model Message {
   id Int @id @default(autoincrement())
   sender_id Int 
   sender User @relation("SentMessages",fields: [sender_id] , references: [id] , onDelete: Cascade) 
   receiver_id Int
   receiver User @relation("ReceivedMessages",fields: [receiver_id], references: [id] , onDelete: Cascade)
   content String
   createdAt DateTime @default(now())

}
//Badge model
model Badge {
    id Int @id @default(autoincrement())
    name String
    description String
    users User[]
    userBadges UserBadge[]
}

//UserBadge model
model UserBadge {
    userId Int
    user User @relation(fields: [userId], references: [id] , onDelete: Cascade)
    badgeId Int
    badge Badge @relation(fields: [badgeId], references: [id] , onDelete: Cascade)
    @@id([userId, badgeId])
}

//Question model
model Question {
    id Int @id @default(autoincrement())
    title String
    description String 
    createdAt DateTime @default(now())
    userId Int
    user User @relation(fields: [userId], references: [id] , onDelete: Cascade)
    answers Answer[]
    questionTags QuestionTag[]
    pictures Picture[]
    savedItems SavedItem[]
}

//Answer model 
model Answer {
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields: [userId] , references: [id],onDelete: Cascade)
  questionId Int
  question Question @relation(fields: [questionId], references: [id] , onDelete: Cascade)
  votes Vote[]
}
//Vote model 
model Vote {
  userId Int
  user User @relation(fields: [userId], references: [id] , onDelete: Cascade)
  answerId Int
  answer Answer @relation(fields: [answerId], references: [id] ,onDelete: Cascade)
  isUpvote Boolean?
  @@id([userId, answerId])
}
//Tag model 
model Tag {
  id Int @id @default(autoincrement())
  name String @unique 
  questionTags QuestionTag[]
}

//QuestionTag model
model QuestionTag {
  questionId Int
  question Question @relation(fields: [questionId], references: [id] , onDelete: Cascade)
  tagId Int
  tag Tag @relation(fields: [tagId], references: [id]  , onDelete: Cascade)
  @@id([questionId, tagId])
}
//Saved items model
model SavedItem{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId Int
  user User @relation(fields: [userId], references: [id] , onDelete:Cascade)
  questionId Int
  question Question @relation(fields: [questionId], references: [id] , onDelete: Cascade) 
}

//Picture model
model Picture {
  id Int @id @default(autoincrement())
  url String
  questionId Int 
  question Question @relation(fields: [questionId], references: [id] , onDelete: Cascade)
}

//Seachlog model
model SearchLog {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id] ,onDelete: Cascade)
  searchQuery String
  createdAt DateTime @default(now())
}